{"/home/travis/build/npmtest/node-npmtest-react-chrome-extension-boilerplate/test.js":"/* istanbul instrument in package npmtest_react_chrome_extension_boilerplate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-chrome-extension-boilerplate/lib.npmtest_react_chrome_extension_boilerplate.js":"/* istanbul instrument in package npmtest_react_chrome_extension_boilerplate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_react_chrome_extension_boilerplate = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_react_chrome_extension_boilerplate = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-react-chrome-extension-boilerplate/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-react-chrome-extension-boilerplate && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_react_chrome_extension_boilerplate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_react_chrome_extension_boilerplate\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_react_chrome_extension_boilerplate.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_react_chrome_extension_boilerplate.rollup.js'] =\n            local.assetsDict['/assets.npmtest_react_chrome_extension_boilerplate.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_react_chrome_extension_boilerplate.__dirname + '/lib.npmtest_react_chrome_extension_boilerplate.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-chrome-extension-boilerplate/node_modules/react-chrome-extension-boilerplate/scripts/compress.js":"const fs = require('fs');\nconst ChromeExtension = require('crx');\n/* eslint import/no-unresolved: 0 */\nconst name = require('../build/manifest.json').name;\nconst argv = require('minimist')(process.argv.slice(2));\n\nconst keyPath = argv.key || 'key.pem';\nconst existsKey = fs.existsSync(keyPath);\nconst crx = new ChromeExtension({\n  appId: argv['app-id'],\n  codebase: argv.codebase,\n  privateKey: existsKey ? fs.readFileSync(keyPath) : null\n});\n\ncrx.load('build')\n  .then(() => crx.loadContents())\n  .then(archiveBuffer => {\n    fs.writeFile(`${name}.zip`, archiveBuffer);\n\n    if (!argv.codebase || !existsKey) return;\n    crx.pack(archiveBuffer).then(crxBuffer => {\n      const updateXML = crx.generateUpdateXML();\n\n      fs.writeFile('update.xml', updateXML);\n      fs.writeFile(`${name}.crx`, crxBuffer);\n    });\n  });\n","/home/travis/build/npmtest/node-npmtest-react-chrome-extension-boilerplate/node_modules/react-chrome-extension-boilerplate/scripts/dev.js":"const tasks = require('./tasks');\nconst createWebpackServer = require('webpack-httpolyglot-server');\nconst devConfig = require('../webpack/dev.config');\n\ntasks.replaceWebpack();\nconsole.log('[Copy assets]');\nconsole.log('-'.repeat(80));\ntasks.copyAssets('dev');\n\nconsole.log('[Webpack Dev]');\nconsole.log('-'.repeat(80));\nconsole.log('If you\\'re developing Inject page,');\nconsole.log('please allow `https://localhost:3000` connections in Google Chrome,');\nconsole.log('and load unpacked extensions with `./dev` folder. (see https://developer.chrome.com/extensions/getstarted#unpacked)\\n');\ncreateWebpackServer(devConfig, {\n  host: 'localhost',\n  port: 3000\n});\n","/home/travis/build/npmtest/node-npmtest-react-chrome-extension-boilerplate/node_modules/react-chrome-extension-boilerplate/scripts/tasks.js":"require('shelljs/global');\n\nexports.replaceWebpack = () => {\n  const replaceTasks = [{\n    from: 'webpack/replace/JsonpMainTemplate.runtime.js',\n    to: 'node_modules/webpack/lib/JsonpMainTemplate.runtime.js'\n  }, {\n    from: 'webpack/replace/log-apply-result.js',\n    to: 'node_modules/webpack/hot/log-apply-result.js'\n  }];\n\n  replaceTasks.forEach(task => cp(task.from, task.to));\n};\n\nexports.copyAssets = type => {\n  const env = type === 'build' ? 'prod' : type;\n  rm('-rf', type);\n  mkdir(type);\n  cp(`chrome/manifest.${env}.json`, `${type}/manifest.json`);\n  cp('-R', 'chrome/assets/*', type);\n  exec(`jade -O \"{ env: '${env}' }\" -o ${type} chrome/views/`);\n};\n","/home/travis/build/npmtest/node-npmtest-react-chrome-extension-boilerplate/node_modules/react-chrome-extension-boilerplate/webpack/dev.config.js":"const path = require('path');\nconst webpack = require('webpack');\n\nconst host = 'localhost';\nconst port = 3000;\nconst hotScript = `webpack-hot-middleware/client?path=http://${host}:${port}/__webpack_hmr`;\n\nconst baseDevConfig = () => ({\n  devtool: 'eval-cheap-module-source-map',\n  entry: {\n    todoapp: [hotScript, path.join(__dirname, '../chrome/extension/todoapp')],\n    background: [hotScript, path.join(__dirname, '../chrome/extension/background')],\n  },\n  devMiddleware: {\n    publicPath: `http://${host}:${port}/js/`,\n    stats: {\n      colors: true\n    },\n    noInfo: true\n  },\n  output: {\n    path: path.join(__dirname, '../dev/js'),\n    filename: '[name].bundle.js',\n    chunkFilename: '[id].chunk.js',\n    publicPath: `http://${host}:${port}/js/`\n  },\n  plugins: [\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.NoErrorsPlugin(),\n    new webpack.IgnorePlugin(/[^/]+\\/[\\S]+.prod$/),\n    new webpack.DefinePlugin({\n      'process.env': {\n        NODE_ENV: JSON.stringify('development')\n      }\n    })\n  ],\n  resolve: {\n    extensions: ['', '.js']\n  },\n  module: {\n    loaders: [{\n      test: /\\.js$/,\n      loader: 'babel',\n      exclude: /node_modules/,\n      query: {\n        presets: ['react-hmre']\n      }\n    }, {\n      test: /\\.css$/,\n      loaders: [\n        'style',\n        'css?modules&sourceMap&importLoaders=1&localIdentName=[name]__[local]___[hash:base64:5]',\n        'postcss'\n      ]\n    }]\n  }\n});\n\nconst injectPageConfig = baseDevConfig();\ninjectPageConfig.entry = [\n  `webpack-hot-middleware/client?path=//${host}:${port}/__webpack_hmr_for_injectpage`,\n  path.join(__dirname, '../chrome/extension/inject')\n];\ninjectPageConfig.hotMiddleware = {\n  path: '/__webpack_hmr_for_injectpage'\n};\ninjectPageConfig.output = {\n  path: path.join(__dirname, '../dev/js'),\n  filename: 'inject.bundle.js',\n  publicPath: `//${host}:${port}/js/`\n};\nconst appConfig = baseDevConfig();\n\nmodule.exports = [\n  injectPageConfig,\n  appConfig\n];\n","/home/travis/build/npmtest/node-npmtest-react-chrome-extension-boilerplate/node_modules/react-chrome-extension-boilerplate/webpack/prod.config.js":"const path = require('path');\nconst webpack = require('webpack');\n\nmodule.exports = {\n  entry: {\n    todoapp: path.join(__dirname, '../chrome/extension/todoapp'),\n    background: path.join(__dirname, '../chrome/extension/background'),\n    inject: path.join(__dirname, '../chrome/extension/inject')\n  },\n  output: {\n    path: path.join(__dirname, '../build/js'),\n    filename: '[name].bundle.js',\n    chunkFilename: '[id].chunk.js'\n  },\n  plugins: [\n    new webpack.optimize.OccurenceOrderPlugin(),\n    new webpack.IgnorePlugin(/[^/]+\\/[\\S]+.dev$/),\n    new webpack.optimize.DedupePlugin(),\n    new webpack.optimize.UglifyJsPlugin({\n      comments: false,\n      compressor: {\n        warnings: false\n      }\n    }),\n    new webpack.DefinePlugin({\n      'process.env': {\n        NODE_ENV: JSON.stringify('production')\n      }\n    })\n  ],\n  resolve: {\n    extensions: ['', '.js']\n  },\n  module: {\n    loaders: [{\n      test: /\\.js$/,\n      loader: 'babel',\n      exclude: /node_modules/\n    }, {\n      test: /\\.css$/,\n      loaders: [\n        'style',\n        'css?modules&importLoaders=1&localIdentName=[name]__[local]___[hash:base64:5]',\n        'postcss'\n      ]\n    }]\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-react-chrome-extension-boilerplate/node_modules/react-chrome-extension-boilerplate/app/actions/todos.js":"import * as types from '../constants/ActionTypes';\n\nexport function addTodo(text) {\n  return { type: types.ADD_TODO, text };\n}\n\nexport function deleteTodo(id) {\n  return { type: types.DELETE_TODO, id };\n}\n\nexport function editTodo(id, text) {\n  return { type: types.EDIT_TODO, id, text };\n}\n\nexport function completeTodo(id) {\n  return { type: types.COMPLETE_TODO, id };\n}\n\nexport function completeAll() {\n  return { type: types.COMPLETE_ALL };\n}\n\nexport function clearCompleted() {\n  return { type: types.CLEAR_COMPLETED };\n}\n","/home/travis/build/npmtest/node-npmtest-react-chrome-extension-boilerplate/node_modules/react-chrome-extension-boilerplate/app/components/Footer.js":"import React, { PropTypes, Component } from 'react';\nimport classnames from 'classnames';\nimport { SHOW_ALL, SHOW_COMPLETED, SHOW_ACTIVE } from '../constants/TodoFilters';\nimport style from './Footer.css';\n\nconst FILTERS = [SHOW_ALL, SHOW_ACTIVE, SHOW_COMPLETED];\nconst FILTER_TITLES = {\n  [SHOW_ALL]: 'All',\n  [SHOW_ACTIVE]: 'Active',\n  [SHOW_COMPLETED]: 'Completed'\n};\n\nexport default class Footer extends Component {\n\n  static propTypes = {\n    completedCount: PropTypes.number.isRequired,\n    activeCount: PropTypes.number.isRequired,\n    filter: PropTypes.string.isRequired,\n    onClearCompleted: PropTypes.func.isRequired,\n    onShow: PropTypes.func.isRequired\n  };\n\n  constructor(props, context) {\n    super(props, context);\n    if (props.onShow) {\n      this.filterHandlers = FILTERS.map(filter => () => props.onShow(filter));\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.onShow) {\n      this.filterHandlers = FILTERS.map(filter => () => nextProps.onShow(filter));\n    }\n  }\n\n  renderTodoCount() {\n    const { activeCount } = this.props;\n    const itemWord = activeCount === 1 ? 'item' : 'items';\n\n    return (\n      <span className={style.todoCount}>\n        <strong>{activeCount || 'No'}</strong> {itemWord} left\n      </span>\n    );\n  }\n\n  renderFilterLink(filter, handler) {\n    const title = FILTER_TITLES[filter];\n    const { filter: selectedFilter } = this.props;\n\n    return (\n      <a\n        className={classnames({ selected: filter === selectedFilter })}\n        style={{ cursor: 'hand' }}\n        onClick={handler}\n      >\n        {title}\n      </a>\n    );\n  }\n\n  renderClearButton() {\n    const { completedCount, onClearCompleted } = this.props;\n    if (completedCount > 0) {\n      return (\n        <button\n          className={style.clearCompleted}\n          onClick={onClearCompleted}\n        >\n          Clear completed\n        </button>\n      );\n    }\n  }\n\n  render() {\n    return (\n      <footer className={style.footer}>\n        {this.renderTodoCount()}\n        <ul className={style.filters}>\n          {FILTERS.map((filter, i) =>\n            <li key={filter}>\n              {this.renderFilterLink(filter, this.filterHandlers[i])}\n            </li>\n          )}\n        </ul>\n        {this.renderClearButton()}\n      </footer>\n    );\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-react-chrome-extension-boilerplate/node_modules/react-chrome-extension-boilerplate/app/components/Header.js":"import React, { PropTypes, Component } from 'react';\nimport TodoTextInput from './TodoTextInput';\n\nexport default class Header extends Component {\n\n  static propTypes = {\n    addTodo: PropTypes.func.isRequired\n  };\n\n  handleSave = text => {\n    if (text.length !== 0) {\n      this.props.addTodo(text);\n    }\n  };\n\n  render() {\n    return (\n      <header>\n        <h1>todos</h1>\n        <TodoTextInput\n          newTodo\n          onSave={this.handleSave}\n          placeholder=\"What needs to be done?\"\n        />\n      </header>\n    );\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-react-chrome-extension-boilerplate/node_modules/react-chrome-extension-boilerplate/app/components/MainSection.js":"import React, { Component, PropTypes } from 'react';\nimport TodoItem from './TodoItem';\nimport Footer from './Footer';\nimport { SHOW_ALL, SHOW_COMPLETED, SHOW_ACTIVE } from '../constants/TodoFilters';\nimport style from './MainSection.css';\n\nconst TODO_FILTERS = {\n  [SHOW_ALL]: () => true,\n  [SHOW_ACTIVE]: todo => !todo.completed,\n  [SHOW_COMPLETED]: todo => todo.completed\n};\n\nexport default class MainSection extends Component {\n\n  static propTypes = {\n    todos: PropTypes.array.isRequired,\n    actions: PropTypes.object.isRequired\n  };\n\n  constructor(props, context) {\n    super(props, context);\n    this.state = { filter: SHOW_ALL };\n  }\n\n  handleClearCompleted = () => {\n    const atLeastOneCompleted = this.props.todos.some(todo => todo.completed);\n    if (atLeastOneCompleted) {\n      this.props.actions.clearCompleted();\n    }\n  };\n\n  handleShow = filter => {\n    this.setState({ filter });\n  };\n\n  renderToggleAll(completedCount) {\n    const { todos, actions } = this.props;\n    if (todos.length > 0) {\n      return (\n        <input\n          className={style.toggleAll}\n          type=\"checkbox\"\n          checked={completedCount === todos.length}\n          onChange={actions.completeAll}\n        />\n      );\n    }\n  }\n\n  renderFooter(completedCount) {\n    const { todos } = this.props;\n    const { filter } = this.state;\n    const activeCount = todos.length - completedCount;\n\n    if (todos.length) {\n      return (\n        <Footer\n          completedCount={completedCount}\n          activeCount={activeCount}\n          filter={filter}\n          onClearCompleted={this.handleClearCompleted}\n          onShow={this.handleShow}\n        />\n      );\n    }\n  }\n\n  render() {\n    const { todos, actions } = this.props;\n    const { filter } = this.state;\n\n    const filteredTodos = todos.filter(TODO_FILTERS[filter]);\n    const completedCount = todos.reduce(\n      (count, todo) => (todo.completed ? count + 1 : count),\n      0\n    );\n\n    return (\n      <section className={style.main}>\n        {this.renderToggleAll(completedCount)}\n        <ul className={style.todoList}>\n          {filteredTodos.map(todo =>\n            <TodoItem key={todo.id} todo={todo} {...actions} />\n          )}\n        </ul>\n        {this.renderFooter(completedCount)}\n      </section>\n    );\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-react-chrome-extension-boilerplate/node_modules/react-chrome-extension-boilerplate/app/components/TodoItem.js":"import React, { Component, PropTypes } from 'react';\nimport classnames from 'classnames';\nimport TodoTextInput from './TodoTextInput';\nimport style from './TodoItem.css';\n\nexport default class TodoItem extends Component {\n\n  static propTypes = {\n    todo: PropTypes.object.isRequired,\n    editTodo: PropTypes.func.isRequired,\n    deleteTodo: PropTypes.func.isRequired,\n    completeTodo: PropTypes.func.isRequired\n  };\n\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      editing: false\n    };\n  }\n\n  handleDoubleClick = () => {\n    this.setState({ editing: true });\n  };\n\n  handleSave = text => {\n    const { todo, deleteTodo, editTodo } = this.props;\n    if (text.length === 0) {\n      deleteTodo(todo.id);\n    } else {\n      editTodo(todo.id, text);\n    }\n    this.setState({ editing: false });\n  };\n\n  handleComplete = () => {\n    const { todo, completeTodo } = this.props;\n    completeTodo(todo.id);\n  };\n\n  handleDelete = () => {\n    const { todo, deleteTodo } = this.props;\n    deleteTodo(todo.id);\n  };\n\n  render() {\n    const { todo } = this.props;\n\n    let element;\n    if (this.state.editing) {\n      element = (\n        <TodoTextInput\n          text={todo.text}\n          editing={this.state.editing}\n          onSave={this.handleSave}\n        />\n      );\n    } else {\n      element = (\n        <div className={style.view}>\n          <input\n            className={style.toggle}\n            type=\"checkbox\"\n            checked={todo.completed}\n            onChange={this.handleComplete}\n          />\n          <label onDoubleClick={this.handleDoubleClick}>\n            {todo.text}\n          </label>\n          <button\n            className={style.destroy}\n            onClick={this.handleDelete}\n          />\n        </div>\n      );\n    }\n\n    return (\n      <li\n        className={classnames({\n          [style.completed]: todo.completed,\n          [style.editing]: this.state.editing,\n          [style.normal]: !this.state.editing\n        })}\n      >\n        {element}\n      </li>\n    );\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-react-chrome-extension-boilerplate/node_modules/react-chrome-extension-boilerplate/app/components/TodoTextInput.js":"import React, { Component, PropTypes } from 'react';\nimport classnames from 'classnames';\nimport style from './TodoTextInput.css';\n\nexport default class TodoTextInput extends Component {\n\n  static propTypes = {\n    onSave: PropTypes.func.isRequired,\n    text: PropTypes.string,\n    placeholder: PropTypes.string,\n    editing: PropTypes.bool,\n    newTodo: PropTypes.bool\n  };\n\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      text: this.props.text || ''\n    };\n  }\n\n  handleSubmit = evt => {\n    const text = evt.target.value.trim();\n    if (evt.which === 13) {\n      this.props.onSave(text);\n      if (this.props.newTodo) {\n        this.setState({ text: '' });\n      }\n    }\n  };\n\n  handleChange = evt => {\n    this.setState({ text: evt.target.value });\n  };\n\n  handleBlur = evt => {\n    if (!this.props.newTodo) {\n      this.props.onSave(evt.target.value);\n    }\n  };\n\n  render() {\n    return (\n      <input\n        className={classnames({\n          [style.edit]: this.props.editing,\n          [style.new]: this.props.newTodo\n        })}\n        type=\"text\"\n        placeholder={this.props.placeholder}\n        autoFocus=\"true\"\n        value={this.state.text}\n        onBlur={this.handleBlur}\n        onChange={this.handleChange}\n        onKeyDown={this.handleSubmit}\n      />\n    );\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-react-chrome-extension-boilerplate/node_modules/react-chrome-extension-boilerplate/app/constants/ActionTypes.js":"export const ADD_TODO = 'ADD_TODO';\nexport const DELETE_TODO = 'DELETE_TODO';\nexport const EDIT_TODO = 'EDIT_TODO';\nexport const COMPLETE_TODO = 'COMPLETE_TODO';\nexport const COMPLETE_ALL = 'COMPLETE_ALL';\nexport const CLEAR_COMPLETED = 'CLEAR_COMPLETED';\n","/home/travis/build/npmtest/node-npmtest-react-chrome-extension-boilerplate/node_modules/react-chrome-extension-boilerplate/app/constants/TodoFilters.js":"export const SHOW_ALL = 'show_all';\nexport const SHOW_COMPLETED = 'show_completed';\nexport const SHOW_ACTIVE = 'show_active';\n","/home/travis/build/npmtest/node-npmtest-react-chrome-extension-boilerplate/node_modules/react-chrome-extension-boilerplate/app/containers/App.js":"import React, { Component, PropTypes } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport MainSection from '../components/MainSection';\nimport * as TodoActions from '../actions/todos';\nimport style from './App.css';\n\n@connect(\n  state => ({\n    todos: state.todos\n  }),\n  dispatch => ({\n    actions: bindActionCreators(TodoActions, dispatch)\n  })\n)\nexport default class App extends Component {\n\n  static propTypes = {\n    todos: PropTypes.array.isRequired,\n    actions: PropTypes.object.isRequired\n  };\n\n  render() {\n    const { todos, actions } = this.props;\n\n    return (\n      <div className={style.normal}>\n        <Header addTodo={actions.addTodo} />\n        <MainSection todos={todos} actions={actions} />\n      </div>\n    );\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-react-chrome-extension-boilerplate/node_modules/react-chrome-extension-boilerplate/app/containers/Root.js":"import React, { Component, PropTypes } from 'react';\nimport { Provider } from 'react-redux';\nimport App from './App';\n\nexport default class Root extends Component {\n\n  static propTypes = {\n    store: PropTypes.object.isRequired\n  };\n\n  render() {\n    const { store } = this.props;\n    return (\n      <Provider store={store}>\n        <App />\n      </Provider>\n    );\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-react-chrome-extension-boilerplate/node_modules/react-chrome-extension-boilerplate/app/reducers/index.js":"import { combineReducers } from 'redux';\nimport todos from './todos';\n\nexport default combineReducers({\n  todos\n});\n","/home/travis/build/npmtest/node-npmtest-react-chrome-extension-boilerplate/node_modules/react-chrome-extension-boilerplate/app/reducers/todos.js":"import * as ActionTypes from '../constants/ActionTypes';\n\nconst initialState = [{\n  text: 'Use Redux',\n  completed: false,\n  id: 0\n}];\n\nconst actionsMap = {\n  [ActionTypes.ADD_TODO](state, action) {\n    return [{\n      id: state.reduce((maxId, todo) => Math.max(todo.id, maxId), -1) + 1,\n      completed: false,\n      text: action.text\n    }, ...state];\n  },\n  [ActionTypes.DELETE_TODO](state, action) {\n    return state.filter(todo =>\n      todo.id !== action.id\n    );\n  },\n  [ActionTypes.EDIT_TODO](state, action) {\n    return state.map(todo =>\n      (todo.id === action.id ?\n        Object.assign({}, todo, { text: action.text }) :\n        todo)\n    );\n  },\n  [ActionTypes.COMPLETE_TODO](state, action) {\n    return state.map(todo =>\n      (todo.id === action.id ?\n        Object.assign({}, todo, { completed: !todo.completed }) :\n        todo)\n    );\n  },\n  [ActionTypes.COMPLETE_ALL](state/*, action*/) {\n    const areAllCompleted = state.every(todo => todo.completed);\n    return state.map(todo => Object.assign({}, todo, {\n      completed: !areAllCompleted\n    }));\n  },\n  [ActionTypes.CLEAR_COMPLETED](state/*, action*/) {\n    return state.filter(todo => todo.completed === false);\n  }\n};\n\nexport default function todos(state = initialState, action) {\n  const reduceFn = actionsMap[action.type];\n  if (!reduceFn) return state;\n  return reduceFn(state, action);\n}\n","/home/travis/build/npmtest/node-npmtest-react-chrome-extension-boilerplate/node_modules/react-chrome-extension-boilerplate/app/store/configureStore.dev.js":"import { applyMiddleware, createStore, compose } from 'redux';\nimport rootReducer from '../reducers';\nimport thunk from 'redux-thunk';\nimport storage from '../utils/storage';\n\nconst enhancer = compose(\n  applyMiddleware(thunk),\n  storage(),\n  window.devToolsExtension ? window.devToolsExtension() : nope => nope\n);\n\nexport default function (initialState) {\n  const store = createStore(rootReducer, initialState, enhancer);\n\n  if (module.hot) {\n    module.hot.accept('../reducers', () => {\n      const nextRootReducer = require('../reducers');\n      store.replaceReducer(nextRootReducer);\n    });\n  }\n  return store;\n}\n","/home/travis/build/npmtest/node-npmtest-react-chrome-extension-boilerplate/node_modules/react-chrome-extension-boilerplate/app/store/configureStore.js":"if (process.env.NODE_ENV === 'production') {\n  module.exports = require('./configureStore.prod');\n} else {\n  module.exports = require('./configureStore.dev');\n}\n","/home/travis/build/npmtest/node-npmtest-react-chrome-extension-boilerplate/node_modules/react-chrome-extension-boilerplate/app/store/configureStore.prod.js":"import { applyMiddleware, createStore, compose } from 'redux';\nimport rootReducer from '../reducers';\nimport thunk from 'redux-thunk';\nimport storage from '../utils/storage';\n\nconst middlewares = applyMiddleware(thunk);\nconst enhancer = compose(\n  middlewares,\n  storage()\n);\n\nexport default function (initialState) {\n  return createStore(rootReducer, initialState, enhancer);\n}\n","/home/travis/build/npmtest/node-npmtest-react-chrome-extension-boilerplate/node_modules/react-chrome-extension-boilerplate/app/utils/storage.js":"function saveState(state) {\n  chrome.storage.local.set({ state: JSON.stringify(state) });\n}\n\n// todos unmarked count\nfunction setBadge(todos) {\n  if (chrome.browserAction) {\n    const count = todos.filter((todo) => !todo.marked).length;\n    chrome.browserAction.setBadgeText({ text: count > 0 ? count.toString() : '' });\n  }\n}\n\nexport default function () {\n  return next => (reducer, initialState) => {\n    const store = next(reducer, initialState);\n    store.subscribe(() => {\n      const state = store.getState();\n      saveState(state);\n      setBadge(state.todos);\n    });\n    return store;\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-react-chrome-extension-boilerplate/node_modules/react-chrome-extension-boilerplate/chrome/extension/background.js":"const bluebird = require('bluebird');\nglobal.Promise = bluebird;\n\nfunction promisifier(method) {\n  // return a function\n  return function promisified(...args) {\n    // which returns a promise\n    return new Promise(resolve => {\n      args.push(resolve);\n      method.apply(this, args);\n    });\n  };\n}\n\nfunction promisifyAll(obj, list) {\n  list.forEach(api => bluebird.promisifyAll(obj[api], { promisifier }));\n}\n\n// let chrome extension api support Promise\npromisifyAll(chrome, [\n  'tabs',\n  'windows',\n  'browserAction',\n  'contextMenus'\n]);\npromisifyAll(chrome.storage, [\n  'local',\n]);\n\nrequire('./background/contextMenus');\nrequire('./background/inject');\nrequire('./background/badge');\n","/home/travis/build/npmtest/node-npmtest-react-chrome-extension-boilerplate/node_modules/react-chrome-extension-boilerplate/chrome/extension/inject.js":"import React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport Dock from 'react-dock';\n\nclass InjectApp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { isVisible: false };\n  }\n\n  buttonOnClick = () => {\n    this.setState({ isVisible: !this.state.isVisible });\n  };\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.buttonOnClick}>\n          Open TodoApp\n        </button>\n        <Dock\n          position=\"right\"\n          dimMode=\"transparent\"\n          defaultSize={0.4}\n          isVisible={this.state.isVisible}\n        >\n          <iframe\n            style={{\n              width: '100%',\n              height: '100%',\n            }}\n            frameBorder={0}\n            allowTransparency=\"true\"\n            src={chrome.extension.getURL('inject.html')}\n          />\n        </Dock>\n      </div>\n    );\n  }\n}\n\nwindow.addEventListener('load', () => {\n  const injectDOM = document.createElement('div');\n  injectDOM.className = 'inject-react-example';\n  injectDOM.style.textAlign = 'center';\n  document.body.appendChild(injectDOM);\n  render(<InjectApp />, injectDOM);\n});\n","/home/travis/build/npmtest/node-npmtest-react-chrome-extension-boilerplate/node_modules/react-chrome-extension-boilerplate/chrome/extension/todoapp.js":"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from '../../app/containers/Root';\nimport './todoapp.css';\n\nchrome.storage.local.get('state', obj => {\n  const { state } = obj;\n  const initialState = JSON.parse(state || '{}');\n\n  const createStore = require('../../app/store/configureStore');\n  ReactDOM.render(\n    <Root store={createStore(initialState)} />,\n    document.querySelector('#root')\n  );\n});\n","/home/travis/build/npmtest/node-npmtest-react-chrome-extension-boilerplate/node_modules/react-chrome-extension-boilerplate/webpack/replace/JsonpMainTemplate.runtime.js":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n/*globals hotAddUpdateChunk parentHotUpdateCallback document XMLHttpRequest $require$ $hotChunkFilename$ $hotMainFilename$ */\nmodule.exports = function() {\n\tfunction webpackHotUpdateCallback(chunkId, moreModules) { // eslint-disable-line no-unused-vars\n\t\thotAddUpdateChunk(chunkId, moreModules);\n\t\tif(parentHotUpdateCallback) parentHotUpdateCallback(chunkId, moreModules);\n\t}\n\n  var context = this;\n  function evalCode(code, context) {\n    return (function() { return eval(code); }).call(context);\n  }\n\n  context.hotDownloadUpdateChunk = function (chunkId) { // eslint-disable-line no-unused-vars\n    var src = __webpack_require__.p + \"\" + chunkId + \".\" + hotCurrentHash + \".hot-update.js\";\n    var request = new XMLHttpRequest();\n\n    request.onload = function() {\n\t\t\tevalCode(this.responseText, context);\n\t\t};\n    request.open(\"get\", src, true);\n    request.send();\n  }\n\n\tfunction hotDownloadManifest(callback) { // eslint-disable-line no-unused-vars\n\t\tif(typeof XMLHttpRequest === \"undefined\")\n\t\t\treturn callback(new Error(\"No browser support\"));\n\t\ttry {\n\t\t\tvar request = new XMLHttpRequest();\n\t\t\tvar requestPath = $require$.p + $hotMainFilename$;\n\t\t\trequest.open(\"GET\", requestPath, true);\n\t\t\trequest.timeout = 10000;\n\t\t\trequest.send(null);\n\t\t} catch(err) {\n\t\t\treturn callback(err);\n\t\t}\n\t\trequest.onreadystatechange = function() {\n\t\t\tif(request.readyState !== 4) return;\n\t\t\tif(request.status === 0) {\n\t\t\t\t// timeout\n\t\t\t\tcallback(new Error(\"Manifest request to \" + requestPath + \" timed out.\"));\n\t\t\t} else if(request.status === 404) {\n\t\t\t\t// no update available\n\t\t\t\tcallback();\n\t\t\t} else if(request.status !== 200 && request.status !== 304) {\n\t\t\t\t// other failure\n\t\t\t\tcallback(new Error(\"Manifest request to \" + requestPath + \" failed.\"));\n\t\t\t} else {\n\t\t\t\t// success\n\t\t\t\ttry {\n\t\t\t\t\tvar update = JSON.parse(request.responseText);\n\t\t\t\t} catch(e) {\n\t\t\t\t\tcallback(e);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcallback(null, update);\n\t\t\t}\n\t\t};\n\t}\n};\n","/home/travis/build/npmtest/node-npmtest-react-chrome-extension-boilerplate/node_modules/react-chrome-extension-boilerplate/chrome/extension/background/badge.js":"chrome.storage.local.get('todos', (obj) => {\n  let todos = obj.todos;\n  if (todos) {\n    todos = JSON.parse(todos);\n    const len = todos.filter((todo) => !todo.marked).length;\n    if (len > 0) {\n      chrome.browserAction.setBadgeText({ text: len.toString() });\n    }\n  } else {\n    // Initial\n    chrome.browserAction.setBadgeText({ text: '1' });\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-react-chrome-extension-boilerplate/node_modules/react-chrome-extension-boilerplate/chrome/extension/background/contextMenus.js":"let windowId = 0;\nconst CONTEXT_MENU_ID = 'example_context_menu';\n\nfunction closeIfExist() {\n  if (windowId > 0) {\n    chrome.windows.remove(windowId);\n    windowId = chrome.windows.WINDOW_ID_NONE;\n  }\n}\n\nfunction popWindow(type) {\n  closeIfExist();\n  const options = {\n    type: 'popup',\n    left: 100, top: 100,\n    width: 800, height: 475\n  };\n  if (type === 'open') {\n    options.url = 'window.html';\n    chrome.windows.create(options, (win) => {\n      windowId = win.id;\n    });\n  }\n}\n\nchrome.contextMenus.create({\n  id: CONTEXT_MENU_ID,\n  title: 'React Chrome Extension Example',\n  contexts: ['all'],\n  documentUrlPatterns: [\n    'https://github.com/*'\n  ]\n});\n\nchrome.contextMenus.onClicked.addListener((event) => {\n  if (event.menuItemId === CONTEXT_MENU_ID) {\n    popWindow('open');\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-react-chrome-extension-boilerplate/node_modules/react-chrome-extension-boilerplate/chrome/extension/background/inject.js":"function isInjected(tabId) {\n  return chrome.tabs.executeScriptAsync(tabId, {\n    code: `var injected = window.reactExampleInjected;\n      window.reactExampleInjected = true;\n      injected;`,\n    runAt: 'document_start'\n  });\n}\n\nfunction loadScript(name, tabId, cb) {\n  if (process.env.NODE_ENV === 'production') {\n    chrome.tabs.executeScript(tabId, { file: `/js/${name}.bundle.js`, runAt: 'document_end' }, cb);\n  } else {\n    // dev: async fetch bundle\n    fetch(`http://localhost:3000/js/${name}.bundle.js`)\n    .then(res => res.text())\n    .then(fetchRes => {\n      // Load redux-devtools-extension inject bundle,\n      // because inject script and page is in a different context\n      const request = new XMLHttpRequest();\n      request.open('GET', 'chrome-extension://lmhkpmbekcpmknklioeibfkpmmfibljd/js/inject.bundle.js');  // sync\n      request.send();\n      request.onload = () => {\n        if (request.readyState === XMLHttpRequest.DONE && request.status === 200) {\n          chrome.tabs.executeScript(tabId, { code: request.responseText, runAt: 'document_start' });\n        }\n      };\n      chrome.tabs.executeScript(tabId, { code: fetchRes, runAt: 'document_end' }, cb);\n    });\n  }\n}\n\nconst arrowURLs = ['^https://github\\\\.com'];\n\nchrome.tabs.onUpdated.addListener(async (tabId, changeInfo, tab) => {\n  if (changeInfo.status !== 'loading' || !tab.url.match(arrowURLs.join('|'))) return;\n\n  const result = await isInjected(tabId);\n  if (chrome.runtime.lastError || result[0]) return;\n\n  loadScript('inject', tabId, () => console.log('load inject bundle success!'));\n});\n"}